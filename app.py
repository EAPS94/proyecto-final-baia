import streamlit as st
import pandas as pd
import json
import yaml
import os
import re
from openai import OpenAI
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel

# üß† Modelo de lenguaje a utilizar
MODELO_LLM = "gpt-4"  # Puedes cambiar a "gpt-4", "gpt-3.5-turbo", "gpt-4.1-nano", etc

# üìå Cargar clave API desde config.yaml
with open("config.yaml", "r") as f:
    config = yaml.safe_load(f)
os.environ["OPENAI_API_KEY"] = config["openai"]["api_key"]

# ‚öôÔ∏è Configurar app
st.set_page_config(layout="wide")
st.title("üìä Generador de Informes de √çndices de Gas Natural")

# üìÇ Precargar datos
df_historico = pd.read_csv("historico.csv")
df_estimaciones = pd.read_csv("estimaciones.csv")

# üî§ Diccionario de nombres completos de √≠ndices
indice_nombres = {
    "HSC": "Houston Ship Channel",
    "Waha": "Waha",
    "Henry Hub": "Henry Hub",
    "SoCal": "Southern California Gas",
    "Tetco": "Texas Eastern, South Texas"
}

# Mostrar en el selectbox los nombres completos (valores), pero mapearlos a las claves (keys)
opciones_visibles = list(indice_nombres.values())
indice_seleccionado_valor = st.sidebar.selectbox("Selecciona un √≠ndice para analizar:", opciones_visibles)

# Buscar la clave correspondiente al valor seleccionado
indice = [k for k, v in indice_nombres.items() if v == indice_seleccionado_valor][0]
nombre_completo = indice_nombres[indice]

# üßº Reiniciar an√°lisis generado si cambia el √≠ndice seleccionado
if "indice_anterior" not in st.session_state:
    st.session_state["indice_anterior"] = indice
elif st.session_state["indice_anterior"] != indice:
    st.session_state["indice_anterior"] = indice
    st.session_state["reporte_generado"] = None

# üìà Funci√≥n de resumen estad√≠stico robustecida
def resumir_indice(nombre, df_hist, df_fut):
    df_hist['fecha'] = pd.to_datetime(df_hist['fecha'], dayfirst=True)
    df_fut['fecha'] = pd.to_datetime(df_fut['fecha'], dayfirst=True)

    fecha_min_hist = df_hist['fecha'].min()
    fecha_max_hist = df_hist['fecha'].max()

    # Filtrar estimaciones desde el mes posterior al hist√≥rico
    mes_siguiente = (fecha_max_hist + pd.DateOffset(months=1)).replace(day=1)
    df_fut_filtrado = df_fut[df_fut['fecha'] >= mes_siguiente]

    fecha_min_fut = df_fut_filtrado['fecha'].min()
    fecha_max_fut = df_fut_filtrado['fecha'].max()

    # C√°lculos robustos para el hist√≥rico
    valores_hist = df_hist[nombre]
    valores_fut = df_fut_filtrado[nombre]

    q1 = valores_hist.quantile(0.25)
    q3 = valores_hist.quantile(0.75)

    resumen = {
        "√çndice": indice_nombres[nombre],
        "Fecha m√≠nima hist√≥rica": fecha_min_hist.strftime('%Y-%m-%d'),
        "Fecha m√°xima hist√≥rica": fecha_max_hist.strftime('%Y-%m-%d'),
        "M√°ximo hist√≥rico": round(valores_hist.max(), 3),
        "M√≠nimo hist√≥rico": round(valores_hist.min(), 3),
        "Promedio hist√≥rico": round(valores_hist.mean(), 3),
        "Mediana hist√≥rica": round(valores_hist.median(), 3),
        "Desviaci√≥n est√°ndar hist√≥rica": round(valores_hist.std(ddof=1), 3),
        "Rango intercuart√≠lico (IQR)": round(q3 - q1, 3),
        "Fecha m√≠nima estimaciones": fecha_min_fut.strftime('%Y-%m-%d'),
        "Fecha m√°xima estimaciones": fecha_max_fut.strftime('%Y-%m-%d'),
        "Promedio estimado (futuro)": round(valores_fut.mean(), 3),
        "Desviaci√≥n est√°ndar estimada (futuro)": round(valores_fut.std(ddof=1), 3)
    }

    return resumen


# üßÆ Generar resumen
resumen_indice = resumir_indice(indice, df_historico, df_estimaciones)

# üìã Mostrar resumen como tabla
st.subheader(f"üìà Resumen estad√≠stico del √≠ndice: {nombre_completo}")
resumen_df = pd.DataFrame(resumen_indice.items(), columns=["Indicador", "Valor"])
resumen_df = resumen_df[resumen_df["Indicador"] != "√çndice"]
st.dataframe(resumen_df.set_index("Indicador"))

# üß† Prompt descriptivo con CoT y estad√≠sticas robustas
AGENTE_PROMPT = f"""
Act√∫a como analista experto en mercados energ√©ticos, especializado en precios de gas natural. Tu tarea es estudiar el √≠ndice: {resumen_indice['√çndice']},cuyas unidades son USD/MMBtu, con base en la informaci√≥n estad√≠stica hist√≥rica y las estimaciones futuras m√°s recientes.

Paso 1: Examina el comportamiento reciente de los precios hist√≥ricos, considerando:
- Intervalo temporal desde {resumen_indice['Fecha m√≠nima hist√≥rica']} hasta {resumen_indice['Fecha m√°xima hist√≥rica']}.
- Valores extremos (m√°ximo y m√≠nimo hist√≥rico).
- Tendencias generales observadas.
- Posibles episodios de alta o baja volatilidad reflejados en la desviaci√≥n est√°ndar o en la dispersi√≥n de los precios.

Paso 2: Eval√∫a la variabilidad de los datos hist√≥ricos comparando medidas robustas como:
- Mediana hist√≥rica frente al promedio hist√≥rico.
- Desviaci√≥n est√°ndar frente al rango intercuart√≠lico (IQR).
Luego, compara estos indicadores con las estimaciones futuras, tomando en cuenta el promedio y la desviaci√≥n est√°ndar proyectada a partir del mes posterior a la √∫ltima observaci√≥n hist√≥rica. Indica si hay evidencia de estabilizaci√≥n, aumento o disminuci√≥n en la variabilidad esperada.

Paso 3: Formula implicaciones concretas para compradores y proveedores de gas natural. Toma en cuenta:
- Si la volatilidad es elevada, podr√≠a ser necesario considerar coberturas contractuales.
- Si los precios futuros son significativamente mayores o menores que los hist√≥ricos, podr√≠a haber oportunidad o riesgo comercial.
- Cualquier patr√≥n detectado que pueda influir en decisiones de compra, venta o planificaci√≥n financiera.

Considera que los precios hist√≥ricos tienen frecuencia diaria y los precios proyectados son promedios mensuales, por lo que cualquier comparaci√≥n debe contemplar esta diferencia de granularidad temporal.

Resumen estad√≠stico del √≠ndice {resumen_indice['√çndice']}:
- Fecha m√≠nima hist√≥rica: {resumen_indice['Fecha m√≠nima hist√≥rica']}
- Fecha m√°xima hist√≥rica: {resumen_indice['Fecha m√°xima hist√≥rica']}
- M√°ximo hist√≥rico: {resumen_indice['M√°ximo hist√≥rico']}
- M√≠nimo hist√≥rico: {resumen_indice['M√≠nimo hist√≥rico']}
- Promedio hist√≥rico: {resumen_indice['Promedio hist√≥rico']}
- Mediana hist√≥rica: {resumen_indice['Mediana hist√≥rica']}
- Desviaci√≥n est√°ndar hist√≥rica: {resumen_indice['Desviaci√≥n est√°ndar hist√≥rica']}
- Rango intercuart√≠lico (IQR): {resumen_indice['Rango intercuart√≠lico (IQR)']}
- Fecha m√≠nima estimaciones: {resumen_indice['Fecha m√≠nima estimaciones']}
- Fecha m√°xima estimaciones: {resumen_indice['Fecha m√°xima estimaciones']}
- Promedio estimado (futuro): {resumen_indice['Promedio estimado (futuro)']}
- Desviaci√≥n est√°ndar estimada (futuro): {resumen_indice['Desviaci√≥n est√°ndar estimada (futuro)']}

Redacta el an√°lisis con un enfoque t√©cnico y estructurado, sin mencionar expl√≠citamente que est√°s siguiendo pasos enumerados. 
No incluyas un t√≠tulo o encabezado, solo subt√≠tulos para organizar la informaci√≥n.
Utiliza una secuencia l√≥gica coherente y profesional, organizada en p√°rrafos tem√°ticos o subt√≠tulos bien definidos. 
Todos los subt√≠tulos que se utilicen deben presentarse siempre en **negritas**, para facilitar la lectura ejecutiva. 
Evita expresiones como ‚Äúvoy a analizar‚Äù, ‚Äúeste reporte muestra‚Äù o enumeraciones expl√≠citas como ‚Äúpaso 1‚Äù, ‚Äúpaso 2‚Äù. 
El contenido debe ser claro, objetivo, orientado a la toma de decisiones, y redactado en un tono profesional, sin hacer referencia a su origen automatizado.
"""


# üßæ Generar reporte en texto
client = OpenAI()

def generar_reporte(resumen_indice):
    prompt = AGENTE_PROMPT
    response = client.chat.completions.create(
        model=MODELO_LLM,
        messages=[
            {"role": "system", "content": "Act√∫as como analista energ√©tico experto."},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

# Mostrar an√°lisis: solo muestra el encabezado si a√∫n no existe el an√°lisis
if "reporte_generado" not in st.session_state:
    st.session_state["reporte_generado"] = None

if not st.session_state["reporte_generado"]:
    if st.button("üìÑ Generar an√°lisis del √≠ndice"):
        st.session_state["reporte_generado"] = generar_reporte(resumen_indice)

# Mostrar encabezado y an√°lisis generado
if st.session_state["reporte_generado"]:
    st.subheader(f"üß† An√°lisis autom√°tico del √≠ndice: {nombre_completo}")
    st.markdown(st.session_state["reporte_generado"])

# üìë Preparar metadata
st.session_state.metadata = {
    "archivos": ["historico.csv", "estimaciones.csv"],
    "descripci√≥n": (
        "Ambos archivos contienen precios del gas natural expresados en USD/MMBtu para distintos √≠ndices. "
        "El archivo 'historico.csv' incluye precios diarios observados, mientras que 'estimaciones.csv' contiene "
        "precios promedio mensuales proyectados."
    ),
    "columnas_comunes": {
        "fecha": (
            "En 'historico.csv', corresponde a la fecha de registro diario (formato YYYY-MM-DD). "
            "En 'estimaciones.csv', corresponde a la fecha de proyecci√≥n mensual (formato YYYY-MM-DD)."
        ),
        indice: f"Precio del √≠ndice {nombre_completo} en USD/MMBtu."
    },
    "nota": (
        "'historico.csv' representa datos observados del pasado, y 'estimaciones.csv' contiene proyecciones a futuro. "
        "Ambos archivos deben combinarse para realizar un an√°lisis temporal integral del comportamiento del √≠ndice seleccionado."
        "Para comparar series temporales, convertir los datos diarios de historico.csv a promedios mensuales antes de graficar."
    )
}

# üìù Solicitud del usuario
st.markdown("### :blue[Crear visualizaci√≥n con ayuda de IA]")
peticion_usuario = st.text_input("Describe la visualizaci√≥n que deseas generar:")

# ü§ñ Evaluador de claridad y propuesta de mejora del prompt
if peticion_usuario.strip():
    st.markdown("### üí° Sugerencias autom√°ticas para mejorar tu solicitud de visualizaci√≥n")

    PROMPT_EVALUADOR = f'''
    Act√∫as como un experto en visualizaci√≥n de datos y comunicaci√≥n con modelos de lenguaje. Tu responsabilidad es mejorar una instrucci√≥n escrita por un usuario para generar una visualizaci√≥n de datos en Python utilizando Streamlit y Plotly Express, dentro de un flujo interactivo.

    El usuario ha escrito la siguiente solicitud:
    ---
    {peticion_usuario}
    ---

    Contexto del an√°lisis del √≠ndice seleccionado:
    ---
    {st.session_state.get("reporte_generado", "Sin an√°lisis disponible a√∫n.")}
    ---

    Tu tarea consiste en:
    1. Reformular la instrucci√≥n del usuario como un prompt claro, conciso y espec√≠fico, que inicie con un verbo de acci√≥n (por ejemplo: "Mostrar...", "Comparar...", "Visualizar...") e indique las variables involucradas.
    2. Seleccionar el tipo de gr√°fico m√°s adecuado (l√≠nea, barras, dispersi√≥n, boxplot, etc.) en funci√≥n de los datos y del prop√≥sito de an√°lisis.
    3. Describir de manera clara, concisa y efectiva el objetivo principal de la visualizaci√≥n: debe resumir claramente el prop√≥sito anal√≠tico, como detectar patrones, comparar grupos, analizar dispersi√≥n o apoyar la toma de decisiones.
    4. ‚ö†Ô∏è Si la instrucci√≥n implica comparar precios hist√≥ricos (`historico.csv`) con proyecciones (`estimaciones.csv`), recuerda que los primeros son precios diarios y los segundos promedios mensuales. Agrega una sugerencia clara de que se debe:
        - Agregar los precios diarios mensualmente (usando `.dt.to_period('M').dt.to_timestamp()` seguido de `groupby`)
        - Alinear los DataFrames antes de graficar.
    5. Como referencia opcional, puedes consultar esta tabla de sugerencias con estructuras t√≠picas de visualizaci√≥n. Util√≠zala solo si consideras que complementa tu recomendaci√≥n y mejora la claridad del prompt. Estas plantillas no son obligatorias:
        - **L√≠nea**: Usa `px.line` con `x=fecha` y `y=precio`. Para `historico.csv`, utiliza precios diarios. Para `estimaciones.csv`, los precios son promedio mensual. Si deseas comparar ambos, primero agrega los precios diarios de `historico.csv` a nivel mensual para alinearlos con `estimaciones.csv`, y concatena los DataFrames. Incluye t√≠tulo, etiquetas y ajustes de layout. Ideal para mostrar evoluci√≥n temporal, identificar tendencias y ciclos.
        - **Barras**: Usa `px.bar` con variables categ√≥ricas como √≠ndice, mes o a√±o. Para `historico.csv`, considera agregaciones como media mensual por categor√≠a. Para comparar con `estimaciones.csv`, aseg√∫rate de alinear los periodos (ambos deben ser datos mensuales). Ideal para comparar cantidades entre categor√≠as o periodos agregados.
        - **Dispersi√≥n**: Usa `px.scatter` para analizar correlaciones. Para `historico.csv`, puedes usar d√≠a y precio. Para `estimaciones.csv`, generalmente solo hay un punto por mes. Para comparaci√≥n, considera mostrar ambos como capas o distinguir por color. Ideal para ver relaci√≥n entre dos variables continuas o comparar dispersi√≥n.
        - **Boxplot**: Usa `px.box` para representar distribuci√≥n de precios por mes, a√±o o categor√≠a. Ideal para `historico.csv`, agrupando por mes. Para comparar con `estimaciones.csv`, recuerda que ya son medias mensuales, por lo que no aplicar√≠a directamente. √ötil para analizar dispersi√≥n y valores at√≠picos.
        - **Pie**: Usa `px.pie` con variables como √≠ndice o regi√≥n si existen. Usar con `estimaciones.csv` solo si representa proporciones agregadas por categor√≠a. No es ideal para series temporales como `historico.csv`, a menos que se agreguen por periodo. Adecuado para mostrar proporciones dentro de un total.
        - **Mapa**: Usa `px.choropleth` o `px.scatter_geo` con coordenadas geogr√°ficas. Aseg√∫rate de que los datos incluyan ubicaci√≥n. Aplica igual para datos hist√≥ricos o estimaciones, o una comparaci√≥n si ambas contienen regiones equivalentes. √ötil para mostrar patrones regionales o distribuci√≥n espacial.
        - **Sankey**: Usa `plotly.graph_objects.Sankey` para visualizar flujos entre categor√≠as como √≠ndices a regiones o a√±os. Aplica si se cuenta con datos categ√≥ricos de transici√≥n, lo cual suele derivarse de agregaciones sobre `historico.csv`. Ideal para visualizar relaciones de flujo entre clases.

        Estas plantillas te orientan para construir visualizaciones m√°s efectivas seg√∫n el contexto del an√°lisis, pero no sustituyen tu criterio profesional, es decir, son meramente orientativas, no son obligatorias.



    Tu respuesta debe cumplir con el siguiente formato exacto y sin desviaciones:

    Prompt sugerido: <un par de l√≠neas claras, comenzando con un verbo, que indique qu√© se debe visualizar, con qu√© variables y usando qu√© archivos>

    ipo de gr√°fico recomendado: <nombre del gr√°fico (como l√≠nea, barras, etc.) seguido de una breve explicaci√≥n contextual del por qu√© es adecuado, por ejemplo: ‚ÄúGr√°fico de l√≠neas ‚Äî ideal para observar evoluci√≥n temporal en datos combinados de precios hist√≥ricos y estimaciones.‚Äù>

    Objetivo del gr√°fico: <una sola l√≠nea que resuma para qu√© se usar√° la visualizaci√≥n, qu√© patr√≥n, comparaci√≥n o tendencia se quiere identificar>

    No incluyas encabezados, explicaciones, listas adicionales ni texto fuera de estas tres l√≠neas. No uses etiquetas Markdown ni comillas. Cada l√≠nea debe ser informativa, breve y √∫til para alimentar directamente a un modelo generador de c√≥digo.
    '''


    try:
        model = OpenAIModel(model_name=MODELO_LLM)
        agente_evaluador = Agent(model)
        if "sugerencia_ia" not in st.session_state:
            st.session_state["sugerencia_ia"] = ""

        if st.button("üí° Generar sugerencia de prompt"):
            resultado_eval = agente_evaluador.run_sync(PROMPT_EVALUADOR)
            st.session_state["sugerencia_ia"] = resultado_eval.output

        if st.session_state["sugerencia_ia"]:
            st.text_area("üß† Sugerencia generada por IA:", value=st.session_state["sugerencia_ia"], height=200, key="sugerencia_ia_box")

        # Intentar extraer el texto del prompt sugerido, tipo de gr√°fico y objetivo usando regex
        sugerido_extraido = None
        tipo_grafico_extraido = None
        objetivo_grafico_extraido = None

        match_prompt = re.search(r"Prompt sugerido\s*:\s*(.+)", st.session_state["sugerencia_ia"], re.IGNORECASE)
        match_grafico = re.search(r"Tipo de gr√°fico recomendado\s*:\s*(.+)", st.session_state["sugerencia_ia"], re.IGNORECASE)
        match_objetivo = re.search(r"Objetivo del gr√°fico\s*:\s*(.+)", st.session_state["sugerencia_ia"], re.IGNORECASE)

        if match_prompt:
            sugerido_extraido = match_prompt.group(1).strip()
        if match_grafico:
            tipo_grafico_extraido = match_grafico.group(1).strip()
        if match_objetivo:
            objetivo_grafico_extraido = match_objetivo.group(1).strip()

        if sugerido_extraido:
            texto_completo = sugerido_extraido
            if tipo_grafico_extraido:
                texto_completo += f" (Tipo de gr√°fico sugerido: {tipo_grafico_extraido})"
            if objetivo_grafico_extraido:
                texto_completo += f" ‚Äî Objetivo: {objetivo_grafico_extraido}"
            if st.button("Usar prompt, tipo y objetivo sugeridos"):
                st.session_state["peticion_final"] = texto_completo
        else:
            st.info("No se detect√≥ un prompt sugerido. Haz clic en 'Generar sugerencia de prompt' o edita uno manualmente si lo prefieres.")


    except Exception as e:
        st.error(f"No se pudo generar la sugerencia: {e}")

# ‚úçÔ∏è Campo para que el usuario ajuste o escriba su versi√≥n final
peticion_final = st.text_area(
    "‚úçÔ∏è Ingresa o ajusta tu versi√≥n final de la descripci√≥n de visualizaci√≥n (este ser√° el prompt utilizado):",
    value=st.session_state.get("peticion_final", peticion_usuario),
    height=100
)

# üß† Prompt de visualizaci√≥n mejorado
libreria = "plotly express (usa tama√±o de figura 800 x 600)"
prompt_visual = f"""
Contexto:
- Est√°s trabajando con dos archivos CSV: "historico.csv" y "estimaciones.csv".
- El archivo "historico.csv" contiene precios diarios de gas natural por √≠ndice.
- El archivo "estimaciones.csv" contiene precios estimados como promedios mensuales para los mismos √≠ndices.
- Para una comparaci√≥n v√°lida entre ambos archivos, debes agregar (agrupar) los precios diarios del hist√≥rico por mes, obteniendo su promedio mensual.
- Debes utilizar la biblioteca {libreria}.
- La visualizaci√≥n debe desplegarse con sintaxis de Streamlit y seguir buenas pr√°cticas de presentaci√≥n visual.
- Prioriza la aplicaci√≥n de los principios de Edward Tufte y las mejores pr√°cticas de visualizaci√≥n de datos: evita el ruido visual innecesario, prioriza la claridad, la densidad informativa y el uso eficiente del espacio, y resalta patrones significativos sin distorsionar la escala.


Descripci√≥n del conjunto de datos:
<descripci√≥n>
{json.dumps(st.session_state.metadata, indent=4, ensure_ascii=False)}
</descripci√≥n>

An√°lisis previo generado por el agente:
{st.session_state.get("reporte_generado", "Sin an√°lisis disponible a√∫n.")}

Instrucci√≥n:
<petici√≥n>
El usuario ha solicitado la siguiente visualizaci√≥n:
{peticion_final}
</petici√≥n>

Requisitos de salida:
- Genera √∫nicamente c√≥digo Python v√°lido.
- No incluyas texto explicativo, solo el bloque de c√≥digo.
"""

system_prompt_visual = f"""
Tu tarea es generar visualizaciones de datos utilizando Python y Streamlit.

Instrucciones:
- Est√°s trabajando con dos archivos: "historico.csv" (precios diarios) y "estimaciones.csv" (precios promedios mensuales).
- Para realizar comparaciones v√°lidas, los precios del archivo "historico.csv" deben agregarse por mes utilizando el promedio mensual antes de graficarse.
- Para calcular promedios mensuales de precios en `historico.csv`, usa `.dt.to_period('M').dt.to_timestamp()` sobre la columna de fecha, y luego agrupa con `groupby` antes de hacer la uni√≥n con `estimaciones.csv`.
- Utiliza la biblioteca Plotly Express o Plotly Graph Objects para construir gr√°ficos claros, legibles y efectivos.
- Genera el tipo de gr√°fico m√°s adecuado (l√≠nea, barras, dispersi√≥n, boxplot, etc.) seg√∫n la estructura del archivo de datos y las estad√≠sticas previamente calculadas.
- El gr√°fico debe facilitar la interpretaci√≥n de tendencias, distribuci√≥n, dispersi√≥n o relaciones relevantes del √≠ndice seleccionado.
- Puedes volver a leer el archivo CSV si es necesario para construir la visualizaci√≥n.
- Siempre que se use `pd.to_datetime`, utiliza `dayfirst=True` para asegurar el formato correcto de fechas como "13/01/2022".
- Si el an√°lisis incluye datos hist√≥ricos y estimaciones, usa elementos separadas con estilos diferentes (color, trazo, etc) para distinguirlos.
- Prioriza la aplicaci√≥n de los principios de Edward Tufte y las mejores pr√°cticas de visualizaci√≥n de datos: evita el ruido visual innecesario, prioriza la claridad, la densidad informativa y el uso eficiente del espacio, y resalta patrones significativos sin distorsionar la escala.
- No incluyas explicaciones, comentarios, ni texto descriptivo adicional.
- No uses markdown ni encierres el c√≥digo con delimitadores como ``` o bloques de c√≥digo.
- El c√≥digo debe estar en Python puro, ser ejecutable directamente, y centrado √∫nicamente en la visualizaci√≥n.
- Usa los valores estad√≠sticos proporcionados (m√°ximo, m√≠nimo, promedio, cuartiles, etc.) como referencia para configurar escalas, ejes y rangos visibles en la gr√°fica.

Formato de salida:
- Solo c√≥digo Python funcional, limpio y directo, sin ning√∫n otro tipo de contenido.
"""

# üöÄ Generar c√≥digo con IA
if st.button("Generar c√≥digo con IA"):
    try:
        model = OpenAIModel(model_name=MODELO_LLM)
        agent = Agent(model, system_prompt=system_prompt_visual)
        result = agent.run_sync(prompt_visual)
        st.session_state["code_to_execute"] = result.output
        st.session_state["codigo_generado"] = result.output.strip().replace("```python", "").replace("```", "")
    except Exception as e:
        st.error(f"Ocurri√≥ un error: {e}. Revisa tu archivo config.yaml o la conexi√≥n.")

# üß™ Mostrar y editar el c√≥digo generado
codigo = st.session_state.get("codigo_generado", "")
codigo = st.text_area("üß™ C√≥digo generado (puedes editarlo antes de ejecutar):", codigo, height=400)

# ‚ö†Ô∏è Ejecutar el c√≥digo generado
st.warning("‚ö†Ô∏è Revisa el c√≥digo antes de ejecutarlo.")
if st.button("Ejecutar c√≥digo"):
    try:
        exec(codigo, globals())  # Ejecuta directamente en el contexto global de Streamlit
        st.success("‚úÖ C√≥digo ejecutado correctamente.")
    except Exception as e:
        st.error(f"‚ùå Error al ejecutar el c√≥digo: {e}")